/*
SECUENCIA 
*/

CREATE SEQUENCE hotel_andes_sequence;

/*
RELACION HOTELES
*/
/
CREATE TABLE HOTELES(
  NIT VARCHAR2(150),
  CIUDAD VARCHAR2(100)
);

ALTER TABLE HOTELES ADD CONSTRAINT PK_HOTELES PRIMARY KEY(NIT);
ALTER TABLE HOTELES ADD CONSTRAINT HOTELES_NN_CIUDAD CHECK(CIUDAD IS NOT NULL);

/
--NOTA: Se genera otra tabla para normalizar.

CREATE TABLE CIUDADES(
  CIUDAD VARCHAR2(100),
  PAIS VARCHAR2(100)
);

ALTER TABLE CIUDADES ADD CONSTRAINT PK_CIUDADES PRIMARY KEY(CIUDAD);
ALTER TABLE CIUDADES ADD CONSTRAINT CIUDADES_NN_PAIS CHECK(PAIS IS NOT NULL);

/
/*
RELACION SERVICIOS
*/

CREATE TABLE SERVICIOS(
  ID NUMBER(13),
  HOTEL_NIT VARCHAR2(150)
);

ALTER TABLE SERVICIOS ADD CONSTRAINT PK_SERVICIOS PRIMARY KEY(ID);

ALTER TABLE SERVICIOS ADD FOREIGN KEY (HOTEL_NIT) REFERENCES HOTELES(NIT);

/
CREATE SEQUENCE servicios_id_sequence;

/

CREATE OR REPLACE TRIGGER servicios_insert
BEFORE INSERT ON SERVICIOS 
  FOR EACH ROW
BEGIN
  SELECT servicios_id_sequence.nextval
  INTO :new.ID
  FROM dual;
END;

/

--RELACION ADMINS_DATOS

CREATE TABLE ADMINS_DATOS_GENERAL(
  TIPO_DOC VARCHAR2(10),
  NUM_DOC VARCHAR2(50),
  NOMBRE VARCHAR2(250),
  HOTEL_NIT VARCHAR2(150)
);

ALTER TABLE ADMINS_DATOS_GENERAL ADD CONSTRAINT PK_ADMINS_DATOS_GENERAL PRIMARY KEY (TIPO_DOC, NUM_DOC);
ALTER TABLE ADMINS_DATOS_GENERAL ADD CONSTRAINT ADMINS_DAT_NOMBRE_NN CHECK(NOMBRE IS NOT NULL);
ALTER TABLE ADMINS_DATOS_GENERAL ADD FOREIGN KEY (HOTEL_NIT) REFERENCES HOTELES(NIT);

/
--NOTA: Se genera una nueva tabla para que quede en BCNF 
CREATE TABLE ADMINS_DATOS_EMAIL(
  TIPO_DOC VARCHAR2(10),
  NUM_DOC VARCHAR2(50),
  EMAIL VARCHAR2(200)
);

ALTER TABLE ADMINS_DATOS_EMAIL ADD CONSTRAINT PK_ADMINS_DATOS_EMAIL PRIMARY KEY (TIPO_DOC, NUM_DOC);
ALTER TABLE ADMINS_DATOS_EMAIL ADD CONSTRAINT ADMINS_DATOS_UNIQUE_EMAIL UNIQUE(EMAIL);
ALTER TABLE ADMINS_DATOS_EMAIL ADD CONSTRAINT ADMINS_DATOS_EMAIL_NN CHECK(EMAIL IS NOT NULL);
ALTER TABLE ADMINS_DATOS_EMAIL ADD FOREIGN KEY (TIPO_DOC, NUM_DOC) REFERENCES ADMINS_DATOS_GENERAL(TIPO_DOC,NUM_DOC);

/
/*
RELACION GERENTES 
*/

CREATE TABLE GERENTES(
  TIPO_DOC VARCHAR2(10),
  NUM_DOC VARCHAR2(50),
  NOMBRE VARCHAR2(250),
  HOTEL_NIT VARCHAR2(150)
);

ALTER TABLE GERENTES ADD CONSTRAINT PK_GERENTES PRIMARY KEY (TIPO_DOC, NUM_DOC);
ALTER TABLE GERENTES ADD CONSTRAINT NOMBRE_NN CHECK(NOMBRE IS NOT NULL);
ALTER TABLE GERENTES ADD FOREIGN KEY (HOTEL_NIT) REFERENCES HOTELES(NIT);

/
--NOTA: Se genera una nueva tabla para que quede en BCNF 
CREATE TABLE GERENTES_EMAIL(
  TIPO_DOC VARCHAR2(10),
  NUM_DOC VARCHAR2(50),
  EMAIL VARCHAR2(200)
);

ALTER TABLE GERENTES_EMAIL ADD CONSTRAINT PK_GERENTES_EMAIL PRIMARY KEY (TIPO_DOC, NUM_DOC);
ALTER TABLE GERENTES_EMAIL ADD CONSTRAINT UNIQUE_EMAIL UNIQUE(EMAIL);
ALTER TABLE GERENTES_EMAIL ADD CONSTRAINT EMAIL_NN CHECK(EMAIL IS NOT NULL);
ALTER TABLE GERENTES_EMAIL ADD FOREIGN KEY (TIPO_DOC, NUM_DOC) REFERENCES GERENTES(TIPO_DOC,NUM_DOC);

/
/*
RELACION EMPLEADOS
*/

CREATE TABLE EMPLEADOS_GENERAL(
  TIPO_DOC VARCHAR2(10),
  NUM_DOC VARCHAR2(50),
  NOMBRE VARCHAR2(250),
  HOTEL_NIT VARCHAR2(150)
);

ALTER TABLE EMPLEADOS_GENERAL ADD CONSTRAINT PK_EMPLEADOS_GENERAL PRIMARY KEY (TIPO_DOC, NUM_DOC);
ALTER TABLE EMPLEADOS_GENERAL ADD CONSTRAINT EMP_GEN_NOMBRE_NN CHECK(NOMBRE IS NOT NULL);
ALTER TABLE EMPLEADOS_GENERAL ADD FOREIGN KEY (HOTEL_NIT) REFERENCES HOTELES(NIT);

/
--NOTA: Se genera una nueva tabla para que quede en BCNF 
CREATE TABLE EMPLEADOS_EMAIL(
  TIPO_DOC VARCHAR2(10),
  NUM_DOC VARCHAR2(50),
  EMAIL VARCHAR2(200)
);
ALTER TABLE EMPLEADOS_EMAIL ADD CONSTRAINT PK_EMPLEADOS_EMAIL PRIMARY KEY (TIPO_DOC, NUM_DOC);
ALTER TABLE EMPLEADOS_EMAIL ADD CONSTRAINT EMPL_EMAIL_UNIQUE_EMAIL UNIQUE(EMAIL);
ALTER TABLE EMPLEADOS_EMAIL ADD CONSTRAINT EMPL_EMAIL_EMAIL_NN CHECK(EMAIL IS NOT NULL);
ALTER TABLE EMPLEADOS_EMAIL ADD FOREIGN KEY (TIPO_DOC, NUM_DOC) REFERENCES EMPLEADOS_GENERAL(TIPO_DOC,NUM_DOC);

/*
RELACION RECEPCIONISTA
*/

/

CREATE TABLE RECEPCIONISTAS_GENERAL(
  TIPO_DOC VARCHAR2(10),
  NUM_DOC VARCHAR2(50),
  NOMBRE VARCHAR2(250),
  HOTEL_NIT VARCHAR2(150)
);

ALTER TABLE RECEPCIONISTAS_GENERAL ADD CONSTRAINT PK_RECEPCIONISTAS_GENERAL PRIMARY KEY (TIPO_DOC, NUM_DOC);
ALTER TABLE RECEPCIONISTAS_GENERAL ADD CONSTRAINT RECEP_NOMBRE_NN CHECK(NOMBRE IS NOT NULL);
ALTER TABLE RECEPCIONISTAS_GENERAL ADD FOREIGN KEY (HOTEL_NIT) REFERENCES HOTELES(NIT);

/
--NOTA: Se genera una nueva tabla para que quede en BCNF 
CREATE TABLE RECEPCIONISTAS_EMAIL(
  TIPO_DOC VARCHAR2(10),
  NUM_DOC VARCHAR2(50),
  EMAIL VARCHAR2(200)
);
ALTER TABLE RECEPCIONISTAS_EMAIL ADD CONSTRAINT PK_RECEPCIONISTAS_EMAIL PRIMARY KEY (TIPO_DOC, NUM_DOC);
ALTER TABLE RECEPCIONISTAS_EMAIL ADD CONSTRAINT RECEP_UNIQUE_EMAIL UNIQUE(EMAIL);
ALTER TABLE RECEPCIONISTAS_EMAIL ADD CONSTRAINT RECEP_EMAIL_NN CHECK(EMAIL IS NOT NULL);
ALTER TABLE RECEPCIONISTAS_EMAIL ADD FOREIGN KEY (TIPO_DOC,NUM_DOC) REFERENCES RECEPCIONISTAS_GENERAL(TIPO_DOC,NUM_DOC);

/*
RELACION PLANES_CONSUMO
*/
/
CREATE TABLE PLANES_CONSUMO(
  ID NUMBER(10),
  NOMBRE VARCHAR2(100),
  DESCRIPCION VARCHAR2(500),
  HOTEL_NIT VARCHAR2(150)
);

ALTER TABLE PLANES_CONSUMO ADD CONSTRAINT PK_PLANES_CONSUMO PRIMARY KEY(ID);

ALTER TABLE PLANES_CONSUMO ADD CONSTRAINT PLAN_CONS_ID_IDENT_UNIQUE UNIQUE(NOMBRE,HOTEL_NIT);

ALTER TABLE PLANES_CONSUMO ADD CONSTRAINT PLAN_CONS_NN_NOMBRE CHECK(NOMBRE IS NOT NULL);

ALTER TABLE PLANES_CONSUMO ADD FOREIGN KEY(HOTEL_NIT) REFERENCES HOTELES(NIT);
/
CREATE SEQUENCE planes_consumo_id_sequence;

/

CREATE OR REPLACE TRIGGER planes_consumo_insert

  BEFORE INSERT ON PLANES_CONSUMO 
  FOR EACH ROW
BEGIN
  SELECT planes_consumo_id_sequence.nextval
  INTO :new.ID
  FROM dual;
END;

/*
RELACION DESCUENTOS
*/
/
CREATE TABLE DESCUENTOS(
  ID NUMBER(13),
  PORCENTAJE_DESCUENTO NUMBER(1,4),
  COSTO_FIJO NUMBER(10,2),
  FECHA_INICIO TIMESTAMP,
  FECHA_FIN TIMESTAMP
);

ALTER TABLE DESCUENTOS ADD CONSTRAINT PK_DESCUENTOS PRIMARY KEY (ID);

ALTER TABLE DESCUENTOS ADD CONSTRAINT DESC_ID_IDENT_UNIQUE UNIQUE(PORCENTAJE_DESCUENTO,COSTO_FIJO,FECHA_INICIO,FECHA_FIN);

ALTER TABLE DESCUENTOS ADD CONSTRAINT PORCENTAJE_DESCUENTO_RANGO CHECK(PORCENTAJE_DESCUENTO >= 0 AND PORCENTAJE_DESCUENTO <= 1);

ALTER TABLE DESCUENTOS ADD CONSTRAINT COSTO_FIJO CHECK(COSTO_FIJO >= 0);

ALTER TABLE DESCUENTOS ADD CONSTRAINT FECHA_INICIO_NN CHECK(FECHA_INICIO IS NOT NULL);

ALTER TABLE DESCUENTOS ADD CONSTRAINT FECHA_FIN_NN CHECK(FECHA_FIN IS NOT NULL);
/
CREATE SEQUENCE descuentos_id_sequence;

/

CREATE OR REPLACE TRIGGER descuentos_insert 
  BEFORE INSERT ON DESCUENTOS 
  FOR EACH ROW
BEGIN
  SELECT descuentos_id_sequence.nextval
  INTO :new.ID
  FROM dual;
END;


/*
RELACION PLANES_CONSUMO_DESCUENTOS
*/ 

/
CREATE TABLE PLANES_CONSUMO_DESCUENTOS (
  PLAN_CONSUMO_ID NUMBER(10),
  DESCUENTO_ID NUMBER(13)
);

ALTER TABLE PLANES_CONSUMO_DESCUENTOS ADD CONSTRAINT PK_PLANES_CONSUMO_DESCUENTOS PRIMARY KEY (PLAN_CONSUMO_ID, DESCUENTO_ID);
ALTER TABLE PLANES_CONSUMO_DESCUENTOS ADD FOREIGN KEY (PLAN_CONSUMO_ID) REFERENCES PLANES_CONSUMO(ID);
ALTER TABLE PLANES_CONSUMO_DESCUENTOS ADD FOREIGN KEY (DESCUENTO_ID) REFERENCES DESCUENTOS(ID);


/*
RELACION DESCUENTOS_SERVICIOS
*/

/
CREATE TABLE DESCUENTOS_SERVICIOS (
  DESCUENTO_ID NUMBER(13),
  SERVICIO_ID NUMBER(10)
);

ALTER TABLE DESCUENTOS_SERVICIOS ADD CONSTRAINT PK_DESCUENTOS_SERVICIOS PRIMARY KEY (DESCUENTO_ID, SERVICIO_ID); 
ALTER TABLE DESCUENTOS_SERVICIOS ADD FOREIGN KEY (DESCUENTO_ID) REFERENCES DESCUENTOS(ID);
ALTER TABLE DESCUENTOS_SERVICIOS ADD FOREIGN KEY (SERVICIO_ID) REFERENCES SERVICIOS(ID);

/*
RELACION CUENTAS
*/

/
CREATE TABLE CUENTAS(
  NUMERO_CUENTA NUMBER(13),
  PAZ_SALVO NUMBER(1)
);

ALTER TABLE CUENTAS ADD CONSTRAINT PK_CUENTAS PRIMARY KEY (NUMERO_CUENTA);

ALTER TABLE CUENTAS ADD CONSTRAINT PAZ_SALVO_ENUM CHECK(PAZ_SALVO = 0 OR PAZ_SALVO = 1);

/

CREATE SEQUENCE numero_cuenta_sequence;

/

CREATE OR REPLACE TRIGGER numero_cuenta_insert 
  BEFORE INSERT ON CUENTAS 
  FOR EACH ROW
BEGIN
  SELECT numero_cuenta_sequence.nextval
  INTO :new.NUMERO_CUENTA
  FROM dual;
END;

/*
RELACION PLANCONSUMO_CUENTAS
*/

/

CREATE TABLE PLANES_CONSUMO_CUENTAS(
  PLAN_CONSUMO_ID NUMBER(10),
  NUMERO_CUENTA NUMBER(13)
);

ALTER TABLE PLANES_CONSUMO_CUENTAS ADD CONSTRAINT PK_PLANES_CONSUMO_CUENTAS PRIMARY KEY (PLAN_CONSUMO_ID, NUMERO_CUENTA);

ALTER TABLE PLANES_CONSUMO_CUENTAS ADD FOREIGN KEY (PLAN_CONSUMO_ID) REFERENCES PLANES_CONSUMO(ID);

ALTER TABLE PLANES_CONSUMO_CUENTAS ADD FOREIGN KEY (NUMERO_CUENTA) REFERENCES CUENTAS(NUMERO_CUENTA);


/*
RELACION TIPOS_HABITACIONES
*/

/
CREATE TABLE TIPOS_HABITACIONES(
  ID_SERVICIO NUMBER(13),
  NOMBRE VARCHAR2(100),
  CAPACIDAD NUMBER(10),
  COSTO_NOCHE NUMBER(10,2)
);

ALTER TABLE TIPOS_HABITACIONES ADD CONSTRAINT PK_TIPOS_HABITACIONES PRIMARY KEY(ID_SERVICIO);
ALTER TABLE TIPOS_HABITACIONES ADD CONSTRAINT TIP_HABIT_NN_CAPACIDAD CHECK(CAPACIDAD IS NOT NULL);
ALTER TABLE TIPOS_HABITACIONES ADD CONSTRAINT TIP_HABIT_CAPACIDAD_NO_NEG CHECK(CAPACIDAD >= 0);

ALTER TABLE TIPOS_HABITACIONES ADD CONSTRAINT TIP_HABIT_NN_COSTO_NOCHE CHECK(COSTO_NOCHE IS NOT NULL);
ALTER TABLE TIPOS_HABITACIONES ADD CONSTRAINT TIP_HABIT_COSTO_NOCHE_NO_NEG CHECK(COSTO_NOCHE >= 0);

ALTER TABLE TIPOS_HABITACIONES ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);

/*
RELACION SERVICIO_HABITACIONES
*/

/

CREATE TABLE SERVICIOS_HABITACIONES(
  NUMERO_HABITACION NUMBER(13),
  OCUPADA NUMBER(1),
  ID_SERVICIO_TIPO_HABITACION NUMBER(13)
);

ALTER TABLE SERVICIOS_HABITACIONES ADD CONSTRAINT PK_SERVICIOS_HABITACIONES PRIMARY KEY (ID_SERVICIO_TIPO_HABITACION,NUMERO_HABITACION);

ALTER TABLE SERVICIOS_HABITACIONES ADD CONSTRAINT SERV_HABIT_OCUPADA_ENUM CHECK(OCUPADA = 0 OR OCUPADA = 1);

ALTER TABLE SERVICIOS_HABITACIONES ADD FOREIGN KEY (ID_SERVICIO_TIPO_HABITACION) REFERENCES TIPOS_HABITACIONES(ID_SERVICIO); 

/*
RELACION RESERVAS_HABITACIONES
*/
/
CREATE TABLE RESERVAS_HABITACIONES(
  ID NUMBER(10),
  FECHA_ENTRADA TIMESTAMP,
  FECHA_SALIDA TIMESTAMP,
  NUM_PERSONAS NUMBER(5),
  PLAN_PAGO VARCHAR2(70),
  NUMERO_HABITACION NUMBER(13),
  ID_SERVICIO_TIPO_HABITACION NUMBER(13),
  RECEPCIONISTA_TIPO_DOC VARCHAR2(10),
  RECEPCIONISTA_NUM_DOC VARCHAR2(50),
  NUMERO_CUENTA NUMBER(13)
);

ALTER TABLE RESERVAS_HABITACIONES ADD CONSTRAINT PK_RESERVAS_HABIT PRIMARY KEY(ID);

ALTER TABLE RESERVAS_HABITACIONES ADD CONSTRAINT RESERV_HABIT_UNIQUE_ID_IDENTIFIER UNIQUE(FECHA_ENTRADA, FECHA_SALIDA, NUM_PERSONAS, PLAN_PAGO,NUMERO_HABITACION, ID_SERVICIO_TIPO_HABITACION);

ALTER TABLE RESERVAS_HABITACIONES ADD CONSTRAINT RESERV_HABIT_NN_FECHA_IN CHECK(FECHA_ENTRADA IS NOT NULL);

ALTER TABLE RESERVAS_HABITACIONES ADD CONSTRAINT RESERV_HABIT_NN_FECHA_OUT CHECK(FECHA_SALIDA IS NOT NULL);

ALTER TABLE RESERVAS_HABITACIONES ADD CONSTRAINT RESERV_HABIT_FECHA CHECK(FECHA_SALIDA > FECHA_ENTRADA);

ALTER TABLE RESERVAS_HABITACIONES ADD CONSTRAINT RESERV_HABIT_NUM_PERSONAS_POS CHECK(NUM_PERSONAS > 0);

ALTER TABLE RESERVAS_HABITACIONES ADD CONSTRAINT RESERV_HABIT_NN_PLAN_PAGO CHECK(PLAN_PAGO IS NOT NULL);

ALTER TABLE RESERVAS_HABITACIONES ADD FOREIGN KEY(NUMERO_HABITACION, ID_SERVICIO_TIPO_HABITACION) REFERENCES SERVICIOS_HABITACIONES(NUMERO_HABITACION, ID_SERVICIO_TIPO_HABITACION);
ALTER TABLE RESERVAS_HABITACIONES ADD FOREIGN KEY(RECEPCIONISTA_TIPO_DOC,RECEPCIONISTA_NUM_DOC) REFERENCES RECEPCIONISTAS_GENERAL(TIPO_DOC,NUM_DOC);
ALTER TABLE RESERVAS_HABITACIONES ADD FOREIGN KEY(NUMERO_CUENTA) REFERENCES CUENTAS(NUMERO_CUENTA);

/
CREATE SEQUENCE reservas_habitaciones_id_sequence;

/

CREATE OR REPLACE TRIGGER reservas_habitaciones_insert 
  BEFORE INSERT ON RESERVAS_HABITACIONES 
  FOR EACH ROW
BEGIN
  SELECT reservas_habitaciones_id_sequence.nextval
  INTO :new.ID
  FROM dual;
END;



/
CREATE TABLE DISPONIBILIDAD_HABITACIONES (
  NUMERO_HABITACION NUMBER(13),
  ID_SERVICIO_TIPO_HABITACION NUMBER(13),
  FECHA_DISPONIBLE TIMESTAMP
);

ALTER TABLE DISPONIBILIDAD_HABITACIONES ADD CONSTRAINT PK_DISPONIBILIDAD_HABIT PRIMARY KEY(NUMERO_HABITACION, ID_SERVICIO_TIPO_HABITACION);
ALTER TABLE DISPONIBILIDAD_HABITACIONES ADD FOREIGN KEY (NUMERO_HABITACION, ID_SERVICIO_TIPO_HABITACION) REFERENCES SERVICIOS_HABITACIONES(NUMERO_HABITACION, ID_SERVICIO_TIPO_HABITACION);

/*
RELACION DISPONIBILIDAD_HABITACIONES
*/
/*
RELACION CLIENTE
*/

/
CREATE TABLE CLIENTES_GENERAL(
  TIPO_DOC VARCHAR2(10),
  NUM_DOC VARCHAR2(50),
  NOMBRE VARCHAR2(250)
);

ALTER TABLE CLIENTES_GENERAL ADD CONSTRAINT PK_CLIENTES_GENERAL PRIMARY KEY (TIPO_DOC, NUM_DOC);
ALTER TABLE CLIENTES_GENERAL ADD CONSTRAINT CLIENTES_GRL_NOMBRE_NN CHECK(NOMBRE IS NOT NULL);

/
--NOTA: Se genera una nueva tabla para que quede en BCNF 
CREATE TABLE CLIENTES_EMAIL(
  TIPO_DOC VARCHAR2(10),
  NUM_DOC VARCHAR2(50),
  EMAIL VARCHAR2(200)
);
ALTER TABLE CLIENTES_EMAIL ADD CONSTRAINT PK_CLIENTES_EMAIL PRIMARY KEY (TIPO_DOC, NUM_DOC);
ALTER TABLE CLIENTES_EMAIL ADD CONSTRAINT CLIENTES_EMAIL_UNIQUE_EMAIL UNIQUE(EMAIL);
ALTER TABLE CLIENTES_EMAIL ADD CONSTRAINT CLIENTES_EMAIL_EMAIL_NN CHECK(EMAIL IS NOT NULL);
ALTER TABLE CLIENTES_EMAIL ADD FOREIGN KEY (TIPO_DOC, NUM_DOC) REFERENCES CLIENTES_GENERAL(TIPO_DOC,NUM_DOC);

/*
RELACION RESERVAS_CLIENTES
*/

/
CREATE TABLE RESERVAS_CLIENTES 
(
  CLIENTE_TIPO_DOC VARCHAR2(10),
  CLIENTE_NUM_DOC VARCHAR2(50),
  ID_RESERVA NUMBER(10)
);

ALTER TABLE RESERVAS_CLIENTES ADD CONSTRAINT PK_RESERVAS_CLIENTES PRIMARY KEY (CLIENTE_TIPO_DOC,CLIENTE_NUM_DOC, ID_RESERVA);

ALTER TABLE RESERVAS_CLIENTES ADD FOREIGN KEY (CLIENTE_TIPO_DOC,CLIENTE_NUM_DOC) REFERENCES CLIENTES_GENERAL(TIPO_DOC,NUM_DOC);
ALTER TABLE RESERVAS_CLIENTES ADD FOREIGN KEY (ID_RESERVA) REFERENCES RESERVAS_HABITACIONES(ID);

/*
RELACION CONSUMOS
*/

/
CREATE TABLE CONSUMOS(
  ID NUMBER(15),
  TOTAL NUMBER(12,2),
  FECHA TIMESTAMP,
  CARGO_HABITACION NUMBER(1),
  ID_SERVICIO NUMBER(13),
  NUMERO_CUENTA NUMBER(13),
  EMPLEADO_TIPO_DOC VARCHAR2(10),
  EMPLEADO_NUM_DOC VARCHAR2(50)
  );


ALTER TABLE CONSUMOS ADD CONSTRAINT PK_CONSUMOS PRIMARY KEY(ID);

ALTER TABLE CONSUMOS ADD CONSTRAINT CONSMS_ID_UNIQUE_IDENT UNIQUE(TOTAL,FECHA,ID_SERVICIO,NUMERO_CUENTA);

ALTER TABLE CONSUMOS ADD CONSTRAINT CONSMS_CARGO_ENUM CHECK(CARGO_HABITACION = 0 OR CARGO_HABITACION = 1);

ALTER TABLE CONSUMOS ADD CONSTRAINT CONSMS_FECHA_NN CHECK(FECHA IS NOT NULL);

ALTER TABLE CONSUMOS ADD CONSTRAINT CONSMS_TOTAL_NO_NEG CHECK(TOTAL >= 0);

ALTER TABLE CONSUMOS ADD FOREIGN KEY (EMPLEADO_TIPO_DOC,EMPLEADO_NUM_DOC) REFERENCES EMPLEADOS_GENERAL(TIPO_DOC, NUM_DOC);

ALTER TABLE CONSUMOS ADD FOREIGN KEY (NUMERO_CUENTA) REFERENCES CUENTAS(NUMERO_CUENTA);

ALTER TABLE CONSUMOS ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);

/
CREATE SEQUENCE consumos_sequence;

/

CREATE OR REPLACE TRIGGER consumos_insert 
  BEFORE INSERT ON CONSUMOS 
  FOR EACH ROW
BEGIN
  SELECT consumos_sequence.nextval
  INTO :new.ID
  FROM dual;
END;

/*
RELACION ITEM_DOTACION
*/
/
CREATE TABLE ITEMS_DOTACION(
  NOMBRE VARCHAR2(100),
  DESCRIPCION VARCHAR2(150)
);

ALTER TABLE ITEMS_DOTACION ADD CONSTRAINT PK_ITEMS_DOTACION PRIMARY KEY (NOMBRE);
ALTER TABLE ITEMS_DOTACION ADD CONSTRAINT ITEM_DOT_NN_DESCRIPCION CHECK(DESCRIPCION IS NOT NULL);

/*
RELACION TIPOS_ITEMS_DOTACION
*/
/
CREATE TABLE TIPOS_HABITACION_ITEMS(
  ID_TIPO_HABITACION NUMBER(13),
  ITEM_DOTACION VARCHAR2(100)
);

ALTER TABLE TIPOS_HABITACION_ITEMS ADD CONSTRAINT PK_TIPO_HABITACION_ITEMS PRIMARY KEY(ITEM_DOTACION,ID_TIPO_HABITACION);
ALTER TABLE TIPOS_HABITACION_ITEMS ADD FOREIGN KEY(ID_TIPO_HABITACION) REFERENCES SERVICIOS(ID);
ALTER TABLE TIPOS_HABITACION_ITEMS ADD FOREIGN KEY(ITEM_DOTACION) REFERENCES ITEMS_DOTACION(NOMBRE);

/*
RELACION PRODUCTOS
*/
/
CREATE TABLE PRODUCTOS(
  ID NUMBER(13),
  HOTEL_NIT VARCHAR2(150),
  NOMBRE VARCHAR2(100),
  COSTO  NUMBER(10,2)
);

ALTER TABLE PRODUCTOS ADD CONSTRAINT PK_PRODUCTOS PRIMARY KEY(ID);

ALTER TABLE PRODUCTOS ADD CONSTRAINT PRODUC_NN_NOMBRE CHECK(NOMBRE IS NOT NULL);
ALTER TABLE PRODUCTOS ADD CONSTRAINT PRODUC_UNIQUE_ID UNIQUE(HOTEL_NIT,NOMBRE,COSTO);
ALTER TABLE PRODUCTOS ADD CONSTRAINT PRODUCT_NN_COSTO CHECK(COSTO IS NOT NULL);
ALTER TABLE PRODUCTOS ADD CONSTRAINT PRODUCT_COSTO_NO_NEG CHECK(COSTO >= 0);
ALTER TABLE PRODUCTOS ADD FOREIGN KEY (HOTEL_NIT) REFERENCES HOTELES(NIT);

/
CREATE SEQUENCE productos_id_sequence;
/

CREATE OR REPLACE TRIGGER productos_insert 
  BEFORE INSERT ON PRODUCTOS 
  FOR EACH ROW
BEGIN
  SELECT productos_id_sequence.nextval
  INTO :new.ID
  FROM dual;
END;


--SEGUNDA TABLA PARA BCNF

/
CREATE TABLE PRODUCTOS_ID_SERVICIO(
  ID_SERVICIO NUMBER(13),
  ID_PRODUCTO NUMBER(13)
);

ALTER TABLE PRODUCTOS_ID_SERVICIO ADD CONSTRAINT PK_PRODUCTOS_ID_SERVICIO PRIMARY KEY (ID_SERVICIO);
ALTER TABLE PRODUCTOS_ID_SERVICIO ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);
ALTER TABLE PRODUCTOS_ID_SERVICIO ADD FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID);
ALTER TABLE PRODUCTOS_ID_SERVICIO ADD CONSTRAINT PRODUCTOS_ID_SERVICIO_UNIQUE UNIQUE(ID_PRODUCTO);
/*
RELACION PRODUCTOS_DOTACIONES 
*/
/
CREATE TABLE PRODUCTOS_ITEMS_DOTACIONES(
  PRODUCTO NUMBER(13),
  ITEM_DOTACION VARCHAR2(100)
);

ALTER TABLE PRODUCTOS_ITEMS_DOTACIONES ADD CONSTRAINT PK_PROD_ITEM_DOT PRIMARY KEY (PRODUCTO, ITEM_DOTACION);

ALTER TABLE PRODUCTOS_ITEMS_DOTACIONES ADD FOREIGN KEY (PRODUCTO) REFERENCES PRODUCTOS(ID);

ALTER TABLE PRODUCTOS_ITEMS_DOTACIONES ADD FOREIGN KEY (ITEM_DOTACION) REFERENCES ITEMS_DOTACION(NOMBRE);

/*
RELACION PISCINA
*/
/
CREATE TABLE PISCINAS (
    NOMBRE  VARCHAR2(100),
    CAPACIDAD   NUMBER(4,0),
    PROFUNDIDAD_CM NUMBER(5,2),
    COSTO_USO   NUMBER(10,3),
    ID_SERVICIO NUMBER(13)
);

ALTER TABLE PISCINAS ADD CONSTRAINT PK_PISCINAS PRIMARY KEY (ID_SERVICIO);

ALTER TABLE PISCINAS ADD CONSTRAINT PISCINAS_NN_CAPACIDAD CHECK(CAPACIDAD IS NOT NULL);
ALTER TABLE PISCINAS ADD CONSTRAINT PISCINAS_CAPACIDAD_Positiva CHECK(CAPACIDAD > 0);

ALTER TABLE PISCINAS ADD CONSTRAINT PISCINAS_NN_NOMBRE CHECK(NOMBRE IS NOT NULL);

ALTER TABLE PISCINAS ADD CONSTRAINT PISCINAS_NN_PROFUNDIDAD CHECK(PROFUNDIDAD_CM IS NOT NULL);
ALTER TABLE PISCINAS ADD CONSTRAINT PISCINAS_Profundidad_Positiva CHECK(PROFUNDIDAD_CM > 0);

ALTER TABLE PISCINAS ADD CONSTRAINT PISCINAS_NN_COSTOUSO CHECK(COSTO_USO IS NOT NULL);
ALTER TABLE PISCINAS ADD CONSTRAINT PISCINAS_Costo_NoNeg CHECK(COSTO_USO >= 0);

ALTER TABLE PISCINAS ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);

/*
RELACION HORARIO 
*/
/
CREATE TABLE HORARIOS (
    HORA_INICIO_24h NUMBER(4), 
    HORA_FIN_24h NUMBER(4) 
);

ALTER TABLE HORARIOS ADD CONSTRAINT PK_HORARIOS PRIMARY KEY (HORA_INICIO_24h, HORA_FIN_24h);
ALTER TABLE HORARIOS ADD CONSTRAINT HORARIOS_HORA_I CHECK(HORA_INICIO_24h >= 0 AND HORA_INICIO_24h < 24);
ALTER TABLE HORARIOS ADD CONSTRAINT HORARIOS_HORA_F CHECK(HORA_FIN_24h >= 0 AND HORA_FIN_24h < 24);
ALTER TABLE HORARIOS ADD CONSTRAINT HORARIOS_HORA_COHEREN CHECK(HORA_FIN_24h > HORA_INICIO_24h);

/*
RELACION HORARIO_PISCINA 
*/ 
/
CREATE TABLE HORARIOS_PISCINAS (
  PISCINA_ID_SERVICIO NUMBER(13),
  HORA_INICIO NUMBER(4),
  HORA_FIN NUMBER(4)
);

ALTER TABLE HORARIOS_PISCINAS ADD CONSTRAINT PK_HORARIOS_PISCINAS PRIMARY KEY (PISCINA_ID_SERVICIO, HORA_INICIO, HORA_FIN);
ALTER TABLE HORARIOS_PISCINAS ADD FOREIGN KEY (PISCINA_ID_SERVICIO) REFERENCES PISCINAS(ID_SERVICIO);
ALTER TABLE HORARIOS_PISCINAS ADD FOREIGN KEY (HORA_INICIO, HORA_FIN) REFERENCES HORARIOS(HORA_INICIO_24h, HORA_FIN_24h);

/*
RELACION GIMNASIO
*/
/
CREATE TABLE GIMNASIOS (
    NOMBRE  VARCHAR2(50),
    CAPACIDAD NUMBER(7,0),
    COSTO_USO NUMBER(10,2),
    ID_SERVICIO NUMBER(13)
);

ALTER TABLE GIMNASIOS ADD CONSTRAINT PK_GIMNASIO PRIMARY KEY (ID_SERVICIO);

ALTER TABLE GIMNASIOS ADD CONSTRAINT GYM_NN_CAPACIDAD CHECK(CAPACIDAD IS NOT NULL);

ALTER TABLE GIMNASIOS ADD CONSTRAINT GYM_NN_NOMBRE CHECK(NOMBRE IS NOT NULL);

ALTER TABLE GIMNASIOS ADD CONSTRAINT GYM_CAPACIDAD_Positiva CHECK(CAPACIDAD >= 0);

ALTER TABLE GIMNASIOS ADD CONSTRAINT GYM_NN_COSTOUSO CHECK(COSTO_USO IS NOT NULL);
ALTER TABLE GIMNASIOS ADD CONSTRAINT GYM_Costo_NoNeg CHECK(COSTO_USO >= 0);

ALTER TABLE GIMNASIOS ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);

/*
RELACION MAQUINA 
*/
--NOTA: Aqui pueden existir maquinas con nombre igual y estado igual pero distinto id que correspondan
-- a maquinas de hoteles distintos. 
/
CREATE TABLE MAQUINAS (
    ID    NUMBER(10),
    NOMBRE  VARCHAR2(50),
    ESTADO  VARCHAR2(10)
);

ALTER TABLE MAQUINAS ADD CONSTRAINT PK_MAQUINAS PRIMARY KEY (ID);

ALTER TABLE MAQUINAS ADD CONSTRAINT MAQU_NN_NOMBRE CHECK(NOMBRE IS NOT NULL);

ALTER TABLE MAQUINAS ADD CONSTRAINT MAQU_NN_ESTADO CHECK(ESTADO IS NOT NULL);

ALTER TABLE MAQUINAS ADD CONSTRAINT MAQ_ENUM_ESTADO CHECK(ESTADO IN ('BUENO', 'MALO', 'REGULAR'));
/
CREATE SEQUENCE maquina_id_sequence;

/

CREATE OR REPLACE TRIGGER maquina_insert 
  BEFORE INSERT ON MAQUINAS 
  FOR EACH ROW
BEGIN
  SELECT maquina_id_sequence.nextval
  INTO :new.ID
  FROM dual;
END;


/*
RELACION MAQUINA_GIMNASIO 
*/ 
/
CREATE TABLE MAQUINAS_GIMNASIOS(
  GIMNASIO_ID_SERVICIO NUMBER(13),
  ID_MAQUINA NUMBER(10)
);

ALTER TABLE MAQUINAS_GIMNASIOS ADD CONSTRAINT PK_MAQUINAS_GIMNASIOS PRIMARY KEY(GIMNASIO_ID_SERVICIO, ID_MAQUINA);
ALTER TABLE MAQUINAS_GIMNASIOS ADD FOREIGN KEY (ID_MAQUINA) REFERENCES MAQUINAS(ID);
ALTER TABLE MAQUINAS_GIMNASIOS ADD FOREIGN KEY (GIMNASIO_ID_SERVICIO) REFERENCES GIMNASIOS(ID_SERVICIO);

/*
RELACION HORARIO_GIMNASIO 
*/ 
/
CREATE TABLE HORARIOS_GIMNASIOS(
  GIMNASIO_ID_SERVICIO NUMBER(13),
  HORA_INICIO NUMBER(4),
  HORA_FIN NUMBER(4)
);

ALTER TABLE HORARIOS_GIMNASIOS ADD CONSTRAINT PK_HORARIOS_GIMNASIOS PRIMARY KEY (GIMNASIO_ID_SERVICIO, HORA_INICIO, HORA_FIN);
ALTER TABLE HORARIOS_GIMNASIOS ADD FOREIGN KEY (GIMNASIO_ID_SERVICIO) REFERENCES GIMNASIOS(ID_SERVICIO);
ALTER TABLE HORARIOS_GIMNASIOS ADD FOREIGN KEY (HORA_INICIO, HORA_FIN) REFERENCES HORARIOS(HORA_INICIO_24h,HORA_FIN_24h);

/*
RELACION INTERNET 
*/
/
CREATE TABLE INTERNET (
    NOMBRE VARCHAR2(100),
    CAPACIDAD_MB   NUMBER(13),
    COSTO_DIA   NUMBER(9,2),
    ID_SERVICIO NUMBER(13)
);

ALTER TABLE INTERNET ADD CONSTRAINT PK_INTERNET PRIMARY KEY(ID_SERVICIO);

ALTER TABLE INTERNET ADD CONSTRAINT INTERNET_NOMBRE_NN CHECK(NOMBRE IS NOT NULL);

ALTER TABLE INTERNET ADD CONSTRAINT INTERNET_CAPACIDAD_POSITIVA CHECK(CAPACIDAD_MB >= 0);

ALTER TABLE INTERNET ADD CONSTRAINT INTERNET_COSTO_NO_NEG CHECK(COSTO_DIA >= 0);

ALTER TABLE INTERNET ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);

/*
RELACION BARES
*/
/
CREATE TABLE BARES (
    NOMBRE VARCHAR2(150),
    CAPACIDAD NUMBER(10),
    ESTILO  VARCHAR2(100),
    ID_SERVICIO NUMBER(13)
);

ALTER TABLE BARES ADD CONSTRAINT PK_BARES PRIMARY KEY (ID_SERVICIO);
ALTER TABLE BARES ADD CONSTRAINT BARES_NN_NOMBRE CHECK(NOMBRE IS NOT NULL);
ALTER TABLE BARES ADD CONSTRAINT BARES_CAPACIDAD_NN CHECK(CAPACIDAD IS NOT NULL);
ALTER TABLE BARES ADD CONSTRAINT BARES_CAPACIDAD_NO_NEG CHECK(CAPACIDAD >= 0);
ALTER TABLE BARES ADD CONSTRAINT BARES_ESTILO_NN CHECK(ESTILO IS NOT NULL);
ALTER TABLE BARES ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);

/*
RELACION CARTA_BARES
*/

/
CREATE TABLE CARTA_BARES (
  ID_SERVICIO_BAR NUMBER(13),
  ID_PRODUCTO NUMBER(13)
);

ALTER TABLE CARTA_BARES ADD CONSTRAINT PK_CARTA_BARES PRIMARY KEY (ID_SERVICIO_BAR, ID_PRODUCTO);
ALTER TABLE CARTA_BARES ADD FOREIGN KEY (ID_SERVICIO_BAR) REFERENCES BARES(ID_SERVICIO);
ALTER TABLE CARTA_BARES ADD FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID);

/*
RELACION RESTAURANTES 
*/

/
CREATE TABLE RESTAURANTES(
    NOMBRE VARCHAR2(150),
    CAPACIDAD NUMBER(10),
    ESTILO  VARCHAR2(100),
    ID_SERVICIO NUMBER(13)
);

ALTER TABLE RESTAURANTES ADD CONSTRAINT PK_RESTAURANTES PRIMARY KEY (ID_SERVICIO);
ALTER TABLE RESTAURANTES ADD CONSTRAINT REST_NN_NOMBRE CHECK(NOMBRE IS NOT NULL);
ALTER TABLE RESTAURANTES ADD CONSTRAINT REST_CAPACIDAD_NN CHECK(CAPACIDAD IS NOT NULL);
ALTER TABLE RESTAURANTES ADD CONSTRAINT REST_CAPACIDAD_NO_NEG CHECK(CAPACIDAD >= 0);
ALTER TABLE RESTAURANTES ADD CONSTRAINT REST_ESTILO_NN CHECK(ESTILO IS NOT NULL);
ALTER TABLE RESTAURANTES ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);

/*
RELACION CARTA_RESTAURANTES
*/
/
CREATE TABLE CARTA_RESTAURANTES(
  ID_SERVICIO_RESTAURANTE NUMBER(13),
  ID_PRODUCTO NUMBER(13)
);

ALTER TABLE CARTA_RESTAURANTES ADD CONSTRAINT PK_CARTA_RESTAURANTES PRIMARY KEY (ID_SERVICIO_RESTAURANTE, ID_PRODUCTO);
ALTER TABLE CARTA_RESTAURANTES ADD FOREIGN KEY (ID_SERVICIO_RESTAURANTE) REFERENCES RESTAURANTES(ID_SERVICIO);
ALTER TABLE CARTA_RESTAURANTES ADD FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID);

/*
RELACION SUPERMERCADO 
*/
/
CREATE TABLE SUPERMERCADOS(
    NOMBRE VARCHAR2(100),
    ID_SERVICIO NUMBER(13)
);

ALTER TABLE SUPERMERCADOS ADD CONSTRAINT PK_SUPERMERCADOS PRIMARY KEY (ID_SERVICIO); 

ALTER TABLE SUPERMERCADOS ADD CONSTRAINT SUPER_NOMBRE_NN CHECK(NOMBRE IS NOT NULL);

ALTER TABLE SUPERMERCADOS ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);

/*
RELACION PRODUCTOS_SUPERMERCADOS 
*/
/
CREATE TABLE PRODUCTOS_SUPERMERCADOS(
  ID_SERVICIO_SUPERMERCADO NUMBER(13),
  ID_PRODUCTO NUMBER(13)
);

ALTER TABLE PRODUCTOS_SUPERMERCADOS ADD CONSTRAINT PK_PRODUCTOS_SUPERMERCADOS PRIMARY KEY (ID_SERVICIO_SUPERMERCADO, ID_PRODUCTO);

ALTER TABLE PRODUCTOS_SUPERMERCADOS ADD FOREIGN KEY (ID_SERVICIO_SUPERMERCADO) REFERENCES SUPERMERCADOS(ID_SERVICIO);
ALTER TABLE PRODUCTOS_SUPERMERCADOS ADD FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID);


/*
RELACION TIENDA 
*/
/
CREATE TABLE TIENDAS(
    NOMBRE VARCHAR2(100),
    ID_SERVICIO NUMBER(13)
);

ALTER TABLE TIENDAS ADD CONSTRAINT PK_TIENDAS PRIMARY KEY(ID_SERVICIO); 

ALTER TABLE TIENDAS ADD CONSTRAINT TIENDA_NOMBRE_NN CHECK(NOMBRE IS NOT NULL);

ALTER TABLE TIENDAS ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);

/*
RELACION PRODUCTOS_TIENDAS
*/
/
CREATE TABLE PRODUCTOS_TIENDAS(
  ID_SERVICIO_TIENDAS NUMBER(13),
  ID_PRODUCTO NUMBER(13)
);

ALTER TABLE PRODUCTOS_TIENDAS ADD CONSTRAINT PK_PRODUCTOS_TIENDAS PRIMARY KEY (ID_SERVICIO_TIENDAS, ID_PRODUCTO);
ALTER TABLE PRODUCTOS_TIENDAS ADD FOREIGN KEY (ID_SERVICIO_TIENDAS) REFERENCES TIENDAS(ID_SERVICIO);
ALTER TABLE PRODUCTOS_TIENDAS ADD FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID);

/*
RELACION SPA 
*/
/
CREATE TABLE SPAS(
    NOMBRE VARCHAR2(100),
    ID_SERVICIO NUMBER(13)
);

ALTER TABLE SPAS ADD CONSTRAINT PK_SPAS PRIMARY KEY (ID_SERVICIO); 

ALTER TABLE SPAS ADD CONSTRAINT SPAS_NOMBRE_NN CHECK(NOMBRE IS NOT NULL);

ALTER TABLE SPAS ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);

/*
RELACION SERVICIOS_SPA 
*/
/
CREATE TABLE SERVICIOS_SPA(
    ID NUMBER,
    NOMBRE VARCHAR2(100),
    DURACION_MINUTOS NUMBER(10),
    COSTO NUMBER(15,2)
);

ALTER TABLE SERVICIOS_SPA ADD CONSTRAINT PK_SERVICIOS_SPA PRIMARY KEY(ID);
ALTER TABLE SERVICIOS_SPA ADD CONSTRAINT SERV_SPA_UNIQUE_ID_IDENTIFIER UNIQUE(NOMBRE,DURACION_MINUTOS,COSTO);
ALTER TABLE SERVICIOS_SPA ADD CONSTRAINT SERV_SPA_NOMBRE_NN CHECK(NOMBRE IS NOT NULL);
ALTER TABLE SERVICIOS_SPA ADD CONSTRAINT SERV_SPA_DURACION_MINUTOS_NN CHECK(DURACION_MINUTOS IS NOT NULL);
ALTER TABLE SERVICIOS_SPA ADD CONSTRAINT SERV_SPA_DURACION_MINUTOS_Nneg CHECK(DURACION_MINUTOS >= 0);
ALTER TABLE SERVICIOS_SPA ADD CONSTRAINT SERV_SPA_COSTO_NN CHECK(COSTO IS NOT NULL);
ALTER TABLE SERVICIOS_SPA ADD CONSTRAINT SERV_SPA_COSTO_Nneg CHECK(COSTO >= 0);

/
CREATE SEQUENCE servicios_spas_id_sequence;

/

CREATE OR REPLACE TRIGGER servicios_spa_insert 
  BEFORE INSERT ON SERVICIOS_SPA 
  FOR EACH ROW
BEGIN
  SELECT servicios_spas_id_sequence.nextval
  INTO :new.ID
  FROM dual;
END;

/*
RELACION OFERTA_SERV_SPAS
*/
/
CREATE TABLE OFERTA_SERV_SPAS(
  ID_SPA NUMBER(13),
  ID_SERVICIO_SPA NUMBER
);

ALTER TABLE OFERTA_SERV_SPAS ADD CONSTRAINT PK_OFERTA_SERV_SPAS PRIMARY KEY (ID_SPA, ID_SERVICIO_SPA);
ALTER TABLE OFERTA_SERV_SPAS ADD FOREIGN KEY (ID_SPA) REFERENCES SPAS(ID_SERVICIO);
ALTER TABLE OFERTA_SERV_SPAS ADD FOREIGN KEY (ID_SERVICIO_SPA) REFERENCES SERVICIOS_SPA(ID);

/*
RELACION RESERVAS_SPAS 
*/

/
CREATE TABLE RESERVAS_SPA (
  ID    NUMBER,
  FECHA_INICIO TIMESTAMP,
  FECHA_FIN TIMESTAMP, 
  ACEPTADA NUMBER(1),
  CLIENTE_TIPO_DOC  VARCHAR2(10), 
  CLIENTE_NUM_DOC  VARCHAR2(50),
  EMPLEADO_TIPO_DOC   VARCHAR2(10),
  EMPLEADO_NUM_DOC   VARCHAR2(50)
);

ALTER TABLE RESERVAS_SPA ADD CONSTRAINT PK_RESERVAS_SPA PRIMARY KEY (ID);
ALTER TABLE RESERVAS_SPA ADD CONSTRAINT RESERV_SPA_ID_UNIQUE_IDENT UNIQUE(FECHA_INICIO,FECHA_FIN,ACEPTADA,CLIENTE_TIPO_DOC,CLIENTE_NUM_DOC);
ALTER TABLE RESERVAS_SPA ADD CONSTRAINT RESERV_SPA_FECHA_INICIO_NN CHECK(FECHA_INICIO IS NOT NULL);
ALTER TABLE RESERVAS_SPA ADD CONSTRAINT RESERV_SPA_FECHA_FIN_NN CHECK (FECHA_FIN IS NOT NULL);
ALTER TABLE RESERVAS_SPA ADD CONSTRAINT RESERV_SPA_FECHA_FIN_MAYOR CHECK(FECHA_FIN > FECHA_INICIO);
ALTER TABLE RESERVAS_SPA ADD CONSTRAINT RESERV_SPA_ACEPTADA_ENUM CHECK(ACEPTADA = 0 OR ACEPTADA = 1 );
ALTER TABLE RESERVAS_SPA ADD FOREIGN KEY (CLIENTE_TIPO_DOC,CLIENTE_NUM_DOC) REFERENCES CLIENTES_GENERAL(TIPO_DOC,NUM_DOC);
ALTER TABLE RESERVAS_SPA ADD FOREIGN KEY (EMPLEADO_TIPO_DOC, EMPLEADO_NUM_DOC) REFERENCES EMPLEADOS_GENERAL(TIPO_DOC,NUM_DOC);
/
CREATE SEQUENCE reservas_spas_id_sequence;
/

CREATE OR REPLACE TRIGGER reservas_spa_insert 
  BEFORE INSERT ON RESERVAS_SPA 
  FOR EACH ROW
BEGIN
  SELECT reservas_spas_id_sequence.nextval
  INTO :new.ID
  FROM dual;
END;


/*
RELACION RESERVAS_SERVICIOS_SPA
*/
/
CREATE TABLE RESERVAS_SERVICIOS_SPA(
  ID_RESERVA NUMBER,
  ID_SERVICIO_SPA NUMBER
);

ALTER TABLE RESERVAS_SERVICIOS_SPA ADD CONSTRAINT PK_RESERVAS_SERVICIOS_SPA PRIMARY KEY(ID_RESERVA,ID_SERVICIO_SPA);
ALTER TABLE RESERVAS_SERVICIOS_SPA ADD FOREIGN KEY(ID_RESERVA) REFERENCES RESERVAS_SPA(ID);
ALTER TABLE RESERVAS_SERVICIOS_SPA ADD FOREIGN KEY(ID_SERVICIO_SPA) REFERENCES SERVICIOS_SPA(ID);


/*
RELACION LAVADO_PLANCHADO_EMBOLADOS
*/

/
CREATE TABLE LAVADO_PLANCHADO_EMBOLADOS(
  NOMBRE VARCHAR2(100),
  ID_SERVICIO NUMBER(13)
);

ALTER TABLE LAVADO_PLANCHADO_EMBOLADOS ADD CONSTRAINT PK_LAV_PLANCH_EMBOL PRIMARY KEY (ID_SERVICIO);
ALTER TABLE LAVADO_PLANCHADO_EMBOLADOS ADD CONSTRAINT EMBOLADO_NOMBRE_NN CHECK(NOMBRE IS NOT NULL);
ALTER TABLE LAVADO_PLANCHADO_EMBOLADOS ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);

/*
RELACION PRENDA 
*/
/
CREATE TABLE PRENDAS(
  ID NUMBER(10),
  NOMBRE VARCHAR2(100),
  TIPO VARCHAR2(20),
  COSTO NUMBER(10, 2)
);



ALTER TABLE PRENDAS ADD CONSTRAINT PK_PRENDAS PRIMARY KEY (ID);
ALTER TABLE PRENDAS ADD CONSTRAINT PRENDAS_ID_UNIQUE_IDENT UNIQUE(NOMBRE,TIPO,COSTO);
ALTER TABLE PRENDAS ADD CONSTRAINT PRENDAS_NOMBRE_NN CHECK(NOMBRE IS NOT NULL);
ALTER TABLE PRENDAS ADD CONSTRAINT PRENDAS_TIPO_NN CHECK(TIPO IS NOT NULL);
ALTER TABLE PRENDAS ADD CONSTRAINT PRENDAS_COSTO_NN CHECK(COSTO IS NOT NULL);
ALTER TABLE PRENDAS ADD CONSTRAINT PRENDAS_COSTO_NNeg CHECK(COSTO >= 0);

/
CREATE SEQUENCE prendas_sequence;
/

CREATE OR REPLACE TRIGGER prenda_insert 
  BEFORE INSERT ON PRENDAS
  FOR EACH ROW
BEGIN
  SELECT prendas_sequence.nextval
  INTO :new.ID
  FROM dual;
END;

/*
RELACION OFERTA_LAV_PLANCH_EMBOL 
*/
/
CREATE TABLE OFERTA_LAV_PLANCH_EMBOL(
  ID_SERVICIO NUMBER(13),
  ID_PRENDA NUMBER(10)
);

ALTER TABLE OFERTA_LAV_PLANCH_EMBOL ADD CONSTRAINT PK_OFERTA_LAV_PLANCH_EMBOL PRIMARY KEY (ID_SERVICIO, ID_PRENDA);
ALTER TABLE OFERTA_LAV_PLANCH_EMBOL ADD FOREIGN KEY (ID_SERVICIO) REFERENCES LAVADO_PLANCHADO_EMBOLADOS(ID_SERVICIO);
ALTER TABLE OFERTA_LAV_PLANCH_EMBOL ADD FOREIGN KEY (ID_PRENDA) REFERENCES PRENDAS(ID);

/*
RELACION UTENSILIOS 
*/
/
CREATE TABLE UTENSILIOS(
  ID_SERVICIO NUMBER(13),
  NOMBRE VARCHAR2(100)
);

ALTER TABLE UTENSILIOS ADD CONSTRAINT PK_UTENSILIOS PRIMARY KEY (ID_SERVICIO);
ALTER TABLE UTENSILIOS ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);
ALTER TABLE UTENSILIOS ADD CONSTRAINT UTENS_NOMBRE_NN CHECK(NOMBRE IS NOT NULL);


/*
RELACION PRESTAMOS_UTENSILIOS
*/
/
CREATE TABLE PRESTAMOS_UTENSILIOS(
  ID    NUMBER(10),
  FECHA_INICIO TIMESTAMP,
  FECHA_FIN TIMESTAMP,
  PENALIDAD NUMBER(10,2),
  CLIENTE_NUM_DOC VARCHAR2(50),
  CLIENTE_TIPO_DOC VARCHAR2(10)
);

ALTER TABLE PRESTAMOS_UTENSILIOS ADD CONSTRAINT PK_PRESTAMOS_UTENSILIOS PRIMARY KEY (ID);
ALTER TABLE PRESTAMOS_UTENSILIOS ADD CONSTRAINT PREST_UTENS_UNIQUE_ID_IDENTIFIER UNIQUE(FECHA_INICIO,FECHA_FIN,PENALIDAD, CLIENTE_NUM_DOC,CLIENTE_TIPO_DOC);
ALTER TABLE PRESTAMOS_UTENSILIOS ADD CONSTRAINT PREST_UTENS_NN_FECHA_INICIO CHECK(FECHA_INICIO IS NOT NULL);
ALTER TABLE PRESTAMOS_UTENSILIOS ADD CONSTRAINT PREST_UTENS_NN_FECHA_FIN CHECK(FECHA_FIN IS NOT NULL);
ALTER TABLE PRESTAMOS_UTENSILIOS ADD CONSTRAINT PREST_UTENS_PENALIDAD_NO_NEG CHECK(PENALIDAD >= 0);
ALTER TABLE PRESTAMOS_UTENSILIOS ADD FOREIGN KEY (CLIENTE_NUM_DOC,CLIENTE_TIPO_DOC) REFERENCES CLIENTES_GENERAL(NUM_DOC,TIPO_DOC);

/
CREATE SEQUENCE prestamos_utensilios_sequence;
/

CREATE OR REPLACE TRIGGER prestamos_utensilios_insert 
  BEFORE INSERT ON PRESTAMOS_UTENSILIOS 
  FOR EACH ROW
BEGIN
  SELECT prestamos_utensilios_sequence.nextval
  INTO :new.ID
  FROM dual;
END;

/*
RELACION PRESTAMO_UTENSILOS_UTENSILOS
*/
/
CREATE TABLE PRESTAMOS_UTENSILIOS_UTENSILIOS(
  ID_SERVICIO_PRESTAMO NUMBER(13),
  ID_PRESTAMO NUMBER(10)
);

ALTER TABLE PRESTAMOS_UTENSILIOS_UTENSILIOS ADD CONSTRAINT PK PRIMARY KEY(ID_SERVICIO_PRESTAMO, ID_PRESTAMO);
ALTER TABLE PRESTAMOS_UTENSILIOS_UTENSILIOS ADD FOREIGN KEY(ID_SERVICIO_PRESTAMO) REFERENCES UTENSILIOS(ID_SERVICIO);
ALTER TABLE PRESTAMOS_UTENSILIOS_UTENSILIOS ADD FOREIGN KEY(ID_PRESTAMO) REFERENCES PRESTAMOS_UTENSILIOS(ID);


/*
RELACION SALON 
*/ 
/
CREATE TABLE SALONES (
  NOMBRE VARCHAR2(100),
  CAPACIDAD NUMBER(10),
  COSTO_HORA NUMBER(10,2),
  COSTO_EQUIPOS NUMBER(10,2),
  TIPO VARCHAR2(20),
  ID_SERVICIO NUMBER(13)
);

ALTER TABLE SALONES ADD CONSTRAINT PK_SALONES PRIMARY KEY (ID_SERVICIO);

ALTER TABLE SALONES ADD CONSTRAINT SALONES_NN_NOMBRE CHECK(NOMBRE IS NOT NULL);

ALTER TABLE SALONES ADD CONSTRAINT SALONES_NN_CAPACIDAD CHECK(CAPACIDAD IS NOT NULL);
ALTER TABLE SALONES ADD CONSTRAINT SALONES_CAPACIDAD_NO_NEG CHECK(CAPACIDAD >= 0);

ALTER TABLE SALONES ADD CONSTRAINT SALONES_NN_COSTO_HORA CHECK(COSTO_HORA IS NOT NULL);
ALTER TABLE SALONES ADD CONSTRAINT SALONES_COSTO_HORA_NO_NEG CHECK(COSTO_HORA >= 0);

ALTER TABLE SALONES ADD CONSTRAINT SALONES_NN_COSTO_EQUIPOS CHECK(COSTO_EQUIPOS IS NOT NULL);
ALTER TABLE SALONES ADD CONSTRAINT SALONES_COSTO_EQUIPOS_NO_NEG CHECK(COSTO_EQUIPOS >= 0);

ALTER TABLE SALONES ADD CONSTRAINT SALONES_NN_TIPO CHECK(TIPO IS NOT NULL);

ALTER TABLE SALONES ADD FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIOS(ID);

/*
RELACION RESERVA_SALON 
*/ 
/
CREATE TABLE RESERVAS_SALONES(
  ID NUMBER(10),
  FECHA_INICIO TIMESTAMP,
  FECHA_FIN TIMESTAMP,
  USO_EQUIPOS NUMBER(1),
  ACEPTADA NUMBER(1),
  EMPLEADO_TIPO_DOC VARCHAR2(10),
  EMPLEADO_NUM_DOC  VARCHAR2(50),
  CLIENTE_TIPO_DOC  VARCHAR2(10),
  CLIENTE_NUM_DOC  VARCHAR2(50),
  SALON_ID_SERVICIO NUMBER(13) 
);
ALTER TABLE RESERVAS_SALONES ADD CONSTRAINT PK_RESERVAS_SALONES PRIMARY KEY (ID);

ALTER TABLE RESERVAS_SALONES ADD CONSTRAINT RESERV_SALON_UNIQUE_ID_IDENTIFIER UNIQUE(FECHA_INICIO,FECHA_FIN,USO_EQUIPOS,ACEPTADA,CLIENTE_TIPO_DOC,CLIENTE_NUM_DOC,SALON_ID_SERVICIO);

ALTER TABLE RESERVAS_SALONES ADD CONSTRAINT RESERV_SALON_NN_FECHA_INICIO CHECK(FECHA_INICIO IS NOT NULL);

ALTER TABLE RESERVAS_SALONES ADD CONSTRAINT RESERV_SALON_NN_FECHA_FIN CHECK(FECHA_FIN IS NOT NULL);

ALTER TABLE RESERVAS_SALONES ADD CONSTRAINT RESERV_SALON_USO_EQUIPOS_ENUM CHECK(USO_EQUIPOS = 0 OR USO_EQUIPOS = 1);

ALTER TABLE RESERVAS_SALONES ADD CONSTRAINT RESERV_SALON_ACEPTADA_ENUM CHECK(ACEPTADA = 0 OR ACEPTADA = 1);

ALTER TABLE RESERVAS_SALONES ADD FOREIGN KEY (CLIENTE_TIPO_DOC, CLIENTE_NUM_DOC) REFERENCES CLIENTES_GENERAL(TIPO_DOC, NUM_DOC);
ALTER TABLE RESERVAS_SALONES ADD FOREIGN KEY (EMPLEADO_TIPO_DOC,EMPLEADO_NUM_DOC) REFERENCES EMPLEADOS_GENERAL(TIPO_DOC, NUM_DOC);
ALTER TABLE RESERVAS_SALONES ADD FOREIGN KEY (SALON_ID_SERVICIO) REFERENCES SALONES(ID_SERVICIO);

/
CREATE SEQUENCE reservas_salones_sequence;

/

CREATE OR REPLACE TRIGGER reservas_salones_insert 
  BEFORE INSERT ON RESERVAS_SALONES 
  FOR EACH ROW
BEGIN
  SELECT reservas_salones_sequence.nextval
  INTO :new.ID
  FROM dual;
END;

/****************************************
FIN DE LA EJECUCION
*****************************************/
